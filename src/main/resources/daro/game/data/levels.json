{
  "groups": [
    {
      "id": 1,
      "name": "Variables",
      "description": "Variables and primitive data types",
      "levels": [
        {
          "id": 1,
          "name": "Create a variable",
          "description": "Create a variable with the name a and assign it to the value 10",
          "startCode": "// code goes here",
          "help": {
            "text": "Variables are used to store data values.",
            "code": "x = 5 //with this line of code, the value 5 is assigned to x."
          },
          "tests": [
            {
              "id": 1,
              "source": "a",
              "expected": "10",
              "type": "EQUALS"
            }
          ]
        },
        {
          "id": 2,
          "name": "Sum of two numbers",
          "description": "Create a variable called x and assign it the sum of 10 and 15",
          "startCode": "",
          "help": {
            "text": "When assigning to a variable, you can also use arithmetic expressions, such as +, -, /, *.",
            "code": "x = 10 - 5; //this would first calculate 10 - 5 and then assign it to x;\n y = 20 / 2;"
          },
          "tests": [
            {
              "id": 1,
              "source": "x",
              "expected": "25",
              "type": "EQUALS"
            }
          ]
        },
        {
          "id": 3,
          "name": "Other arithmetics",
          "description": "Create a variable x and assign it the 10 * 15",
          "startCode": "",
          "tests": [
            {
              "id": 1,
              "source": "x",
              "expected": "10 * 15",
              "type": "EQUALS"
            }
          ]
        },
        {
          "id": 4,
          "name": "Sum two variables",
          "description": "Assign to a variable 'c', the sum of the variables 'a' and 'b'",
          "startCode": "a = 5;\nb = 10;\n//code goes here",
          "help": {
            "text": "You can also use variables in the assignment of new or current variables.",
            "code": "x = y; // this line would assign the value of y to x.\nx = y / z; // this would assign the result of y / z to x."
          },
          "tests": [
            {
              "id": 1,
              "source": "a",
              "expected": "5",
              "type": "EQUALS"
            },
            {
              "id": 2,
              "source": "b",
              "expected": "10",
              "type": "EQUALS"
            },
            {
              "id": 3,
              "source": "c",
              "expected": "15",
              "type": "EQUALS"
            }
          ]
        },
        {
          "id": 5,
          "name": "Increment and decrement",
          "description": "Increment the value of x by 10",
          "startCode": "x = 5;",
          "help": {
            "text": "You are able to reuse the current value in an assignment.",
            "code": "x = x + 1; //increments the current value of x by 1.\nx -= 2; //would decrease the value of x by 2"
          },
          "tests": [
            {
              "id": 1,
              "source": "x",
              "expected": "15",
              "type": "EQUALS"
            }
          ]
        },
        {
          "id": 6,
          "name": "Strings",
          "description": "Create a string variable called test, containing the string \"Hello World\"",
          "startCode": "",
          "help": {
            "text": "Strings are used to store texts. They have to be created within \"\"",
            "code": "testString = \"This is a typical string, it can contain any character - also numbers like 123.\""
          },
          "tests": [
            {
              "id": 1,
              "source": "test",
              "expected": "\"Hello World\"",
              "type": "EQUALS"
            }
          ]
        },
        {
          "id": 7,
          "name": "Characters",
          "description": "Create a variable z containing only the character z",
          "startCode": "",
          "help": {
            "text": "Characters are used to store only single characters. They have to be created with ''",
            "code": "a = 'x'"
          },
          "tests": [
            {
              "id": 1,
              "source": "z",
              "expected": "'z'",
              "type": "EQUALS"
            }
          ]
        },
        {
          "id": 8,
          "name": "true and false",
          "description": "Create a variable x and make it false",
          "startCode": "",
          "help": {
            "text": "Boolean values are created using the keywords true and false.",
            "code": "a = false; b = false;"
          },
          "tests": [
            {
              "id": 1,
              "source": "x",
              "type": "FALSE"
            },
            {
              "id": 2,
              "source": "x",
              "expected": "false",
              "type": "EQUALS"
            }
          ]
        },
        {
          "id": 9,
          "name": "Mixing data types",
          "description": "Assign to a variable z concatenated value of x and y.",
          "startCode": "x = \"string\";\ny = 5",
          "help": {
            "text": "When trying to add numbers to strings, they are just concatenated to the string.",
            "code": "a = \"Hello world\" + 2; //the value of a is now \"Hello world2\""
          },
          "tests": [
            {
              "id": 1,
              "source": "z",
              "expected": "\"string5\"",
              "type": "EQUALS"
            }
          ]
        }
      ]
    },
    {
      "id": 2,
      "name": "Functions",
      "description": "Routines for your code.",
      "levels": [
        {
          "id": 1,
          "name": "Simple functions",
          "description": "Create a function that returns true.",
          "startCode": "fn getTrue() {\n\t\n}",
          "help": {
            "text": "A function is a routine that is run when it is called. It usually performs a task and returns its result to the place where it has been called.",
            "code": "//This simple function returns the value 10 when called.\nfn test() {\n\treturn 10;\n}\n\na = test(); //after calling the function like that, the value of a will be 10."
          },
          "tests": [
            {
              "id": 1,
              "source": "getTrue()",
              "expected": "true",
              "type": "EQUALS"
            }
          ]
        },
        {
          "id": 2,
          "name": "Summation function",
          "description": "Create a function that returns the sum of its parameters.",
          "startCode": "fn sum(a, b) {\n\t\n}",
          "help": {
            "text": "The return statement can contain any form of expression.",
            "code": "fn multiplyBy5(x) {\n\treturn x * 5;\n}"
          },
          "tests": [
            {
              "id": 1,
              "source": "sum(2,4)",
              "expected": "6",
              "type": "EQUALS"
            },
            {
              "id": 2,
              "source": "sum(5,6)",
              "expected": "11",
              "type": "EQUALS"
            },
            {
              "id": 3,
              "source": "sum(100, 30000)",
              "expected": "30100",
              "type": "EQUALS"
            }
          ]
        },
        {
          "id": 3,
          "name": "Using functions",
          "description": "Call the given functions with the parameters 77 and assign it to a variable a",
          "startCode": "fn toCelsius(fahrenheit) {\n\treturn (5.0/9) * (fahrenheit-32);\n}",
          "help": {
            "text": "A function is called using its identifier and () containing a list of needed parameters.",
            "code": "fn multiplyBy5(x) {\n\treturn x * 5;\n}\n\na = multiplyBy5(10) //a = 50"
          },
          "tests": [
            {
              "id": 1,
              "source": "a",
              "expected": "(5.0/9) * (77-32)",
              "type": "EQUALS"
            }
          ]
        }
      ]
    },
    {
      "id": 3,
      "name": "Conditions",
      "description": "Conditional statements and expressions",
      "levels": [
        {
          "id": 1,
          "name": "Simple if statements",
          "description": "Create a function that returns true if the age is >= 18, otherwise it returns false.",
          "startCode": "fn canEnter(age) {\n\t\n}",
          "help": {
            "text": "The if-conditional contains a block of code, that is only run, if the condition defined in the statement is true.\nSuch conditions either check equality (==) or inequality (!=, <, >, <=, =>).\nIf the condition is followed by else, then this block of code will be executed if the condition is false.",
            "code": "//the print statement is only accessed, if the value of age is 18.\nif age == 18 {\n\tprint(\"you are exactly 18 years old\");\n} else {\n\tprint(\"you are not 18, sorry\");\n}"
          },
          "tests": [
            {
              "id": 1,
              "source": "canEnter(18)",
              "type": "TRUE"
            },
            {
              "id": 2,
              "source": "canEnter(100)",
              "type": "TRUE"
            },
            {
              "id": 3,
              "source": "canEnter(10)",
              "type": "FALSE"
            },
            {
              "id": 3,
              "source": "canEnter(17)",
              "type": "FALSE"
            }
          ]
        },
        {
          "id": 2,
          "name": "Check if number is even",
          "description": "Create a function, that checks if its parameter is even. Return true if it is even, or else return false.",
          "startCode": "fn isEven(number) {\n\t\n}",
          "help": {
            "text": "The return statement accepts also conditions and returns it outcome.\n\nTip for this level: You can use the % to check the remainder of a division, e.g. 3 % 6 is 3, since the result has a remainder of 3.",
            "code": "fn isOne(a) {\n\treturn a == 1;\n}"
          },
          "tests": [
            {
              "id": 1,
              "source": "isEven(2)",
              "type": "TRUE"
            },
            {
              "id": 2,
              "source": "isEven(1)",
              "type": "FALSE"
            },
            {
              "id": 3,
              "source": "isEven(100)",
              "type": "TRUE"
            },
            {
              "id": 4,
              "source": "isEven(777)",
              "type": "FALSE"
            }
          ]
        },
        {
          "id": 3,
          "name": "Simple inequality",
          "description": "Create a function, that checks if a number is odd",
          "startCode": "fn isOdd(number) {\n\t\n}",
          "help": {
            "text": "The != operator checks if two elements are not equal.",
            "code": "a = 10 != 11 //a = true"
          },
          "tests": [
            {
              "id": 1,
              "source": "isOdd(2)",
              "type": "FALSE"
            },
            {
              "id": 2,
              "source": "isOdd(1)",
              "type": "TRUE"
            },
            {
              "id": 3,
              "source": "isOdd(100)",
              "type": "FALSE"
            },
            {
              "id": 4,
              "source": "isOdd(777)",
              "type": "TRUE"
            }
          ]
        },
        {
          "id": 4,
          "name": "Chaining conditions with OR",
          "description": "Create a function that checks if the number given is either < 1 or > 20.",
          "startCode": "fn isOutOfRange(number) {\n\t\n}",
          "help": {
            "text": "Conditions can also be chained. For example || between two conditions checks, if one of both is true and returns true if that is the case.",
            "code": "fn isLisaOrMarco(name) {\n\treturn name == \"Lisa\" || name == \"Marco\";\n}"
          },
          "tests": [
            {
              "id": 1,
              "source": "isOutOfRange(2)",
              "type": "FALSE"
            },
            {
              "id": 2,
              "source": "isOutOfRange(1)",
              "type": "FALSE"
            },
            {
              "id": 3,
              "source": "isOutOfRange(100)",
              "type": "TRUE"
            },
            {
              "id": 4,
              "source": "isOutOfRange(-10)",
              "type": "TRUE"
            }
          ]
        },
        {
          "id": 5,
          "name": "Chaining conditions with AND",
          "description": "Create a function that checks if is within the range 1 < x < 20.",
          "startCode": "fn isInRange(number) {\n\t\n}",
          "help": {
            "text": "Another way to chain conditions is by using &&, which checks if both of the conditions are true, otherwise it returns false.",
            "code": "fn isMarco(name, age) {\n\treturn name == \"Marco\" && age == 20;\n}"
          },
          "tests": [
            {
              "id": 1,
              "source": "isInRange(2)",
              "type": "TRUE"
            },
            {
              "id": 2,
              "source": "isInRange(1)",
              "type": "FALSE"
            },
            {
              "id": 3,
              "source": "isInRange(100)",
              "type": "FALSE"
            },
            {
              "id": 4,
              "source": "isInRange(-10)",
              "type": "FALSE"
            },
            {
              "id": 5,
              "source": "isInRange(10)",
              "type": "TRUE"
            }
          ]
        },
        {
          "id": 6,
          "name": "More complex conditions",
          "description": "Create a function that maps the numbers from 1 - 7 to a weekday, where 1 is Monday, 2 is Tuesday etc.",
          "startCode": "fn getWeekDay(day) {\n\t\n}",
          "help": {
            "text": "For this exercise the match statement can be used.\nIt takes a value as parameter and contains different blocks of code, yet it only executes the statement where the value is equal to the parameter.",
            "code": "match 2 {\n\t1: print(\"A\");\n\t2: print(\"B\");//since the parameter is 2, this code would run.\n\t3: print(\"C\");\n\tdefault: print(\"Not a letter\");//this would run if no match was found\n}"
          },
          "tests": [
            {
              "id": 1,
              "source": "getWeekDay(1)",
              "type": "EQUALS",
              "expected": "\"Monday\""
            },
            {
              "id": 2,
              "source": "getWeekDay(2)",
              "type": "EQUALS",
              "expected": "\"Tuesday\""
            },
            {
              "id": 3,
              "source": "getWeekDay(3)",
              "type": "EQUALS",
              "expected": "\"Wednesday\""
            },
            {
              "id": 4,
              "source": "getWeekDay(4)",
              "type": "EQUALS",
              "expected": "\"Thursday\""
            },
            {
              "id": 5,
              "source": "getWeekDay(5)",
              "type": "EQUALS",
              "expected": "\"Friday\""
            },
            {
              "id": 6,
              "source": "getWeekDay(6)",
              "type": "EQUALS",
              "expected": "\"Saturday\""
            },
            {
              "id": 7,
              "source": "getWeekDay(7)",
              "type": "EQUALS",
              "expected": "\"Sunday\""
            }
          ]
        }
      ]
    },
    {
      "id": 4,
      "name": "Loops",
      "description": "Run the same multiple times",
      "levels": [
        {
          "id": 1,
          "name": "Simple loop",
          "description": "Create a function that creates a string n 'a's, e.g. getA(3) should return the string \"aaa\"",
          "startCode": "fn getA(n) {\n\t\n}",
          "help": {
            "text": "Loops are used to run the same code with different data multiple times. A for loop in DaRo runs as long as the given condition true is.",
            "code": "i = 1;\nfor i <= 3 {\n\tprint(\"loop ran\" + i + \" times\");\n\ti += 1;\n}"
          },
          "tests": [
            {
              "id": 1,
              "source": "getA(0)",
              "expected": "\"\"",
              "type": "EQUALS"
            },
            {
              "id": 2,
              "source": "getA(10)",
              "expected": "\"aaaaaaaaaa\"",
              "type": "EQUALS"
            },
            {
              "id": 3,
              "source": "getA(2)",
              "expected": "\"aa\"",
              "type": "EQUALS"
            },
            {
              "id": 4,
              "source": "getA(5)",
              "expected": "\"aaaaa\"",
              "type": "EQUALS"
            }
          ]
        },
        {
          "id": 2,
          "name": "Factorial",
          "description": "Create a function that calculates the factorial of n (n * n-1 * n-2 * ... * 1). Note that 0! = 1.",
          "startCode": "fn factorial(n) {\n\t\n}",
          "help": {
            "text": "By creating a counter variable (i), you can always make sure, how often a loop is executed.",
            "code": "//This simple loop would run 10 times.\ni = 1;\nfor i <= 10 {\n\ti += 1;\n}"
          },
          "tests": [
            {
              "id": 1,
              "source": "factorial(1)",
              "expected": "1",
              "type": "EQUALS"
            },
            {
              "id": 2,
              "source": "factorial(0)",
              "expected": "1",
              "type": "EQUALS"
            },
            {
              "id": 3,
              "source": "factorial(4)",
              "expected": "24",
              "type": "EQUALS"
            },
            {
              "id": 4,
              "source": "factorial(8)",
              "expected": "40320",
              "type": "EQUALS"
            },
            {
              "id": 5,
              "source": "factorial(20)",
              "expected": "2432902008176640000",
              "type": "EQUALS"
            }
          ]
        },
        {
          "id": 3,
          "name": "Without a certain amount of iterations.",
          "description": "Create a function that searches the next number that is dividable by the second parameter. For example getNextDividable(4, 3) = 6, since the closest following number from 4 which is dividable by 3 is 6",
          "startCode": "fn getNextDividable(number, divisor) {\n\t\n}",
          "help": {
            "text": "The loop doesn't have to run a fixed amount of times. The condition can also depend from variables that are changed within the loop."
          },
          "tests": [
            {
              "id": 1,
              "source": "getNextDividable(1, 2)",
              "expected": "2",
              "type": "EQUALS"
            },
            {
              "id": 2,
              "source": "getNextDividable(3, 6)",
              "expected": "6",
              "type": "EQUALS"
            },
            {
              "id": 3,
              "source": "getNextDividable(20, 7)",
              "expected": "21",
              "type": "EQUALS"
            },
            {
              "id": 4,
              "source": "getNextDividable(60, 10)",
              "expected": "70",
              "type": "EQUALS"
            }
          ]
        },
        {
          "id": 4,
          "name": "Nested loops",
          "description": "Create a function that returns a string containing a square of stars that has the length given in the parameter. E.g. getSquare(3) should return\n***\n***\n***",
          "startCode": "fn getSquare(length) {\n\t\n}",
          "help": {
            "text": "When nesting loops within each other. For each iteration of the outer loop, every iteration of the inner loop is performed.",
            "code": "//in for every loop of the i - loop, the j - loop is run fully\ni = 0;\nfor i <= 4 {\n\tj = 0;\n\tfor j <= 2 {\n\t\tj += 1;\n\t}\n\ti += 1;\n}"
          },
          "tests": [
            {
              "id": 1,
              "source": "getSquare(1)",
              "expected": "\"*\n\"",
              "type": "EQUALS"
            },
            {
              "id": 2,
              "source": "getSquare(2)",
              "expected": "\"**\n**\n\"",
              "type": "EQUALS"
            },
            {
              "id": 3,
              "source": "getSquare(5)",
              "expected": "\"*****\n*****\n*****\n*****\n*****\n\"",
              "type": "EQUALS"
            },
            {
              "id": 4,
              "source": "getSquare(8)",
              "expected": "\"********\n********\n********\n********\n********\n********\n********\n********\n\"",
              "type": "EQUALS"
            }
          ]
        },
        {
          "id": 5,
          "name": "Pyramids",
          "description": "Create a function that returns a string containing a pyramid of stars that has the maximum length given in the parameter. E.g. getPyramid(3) should return\n*\n**\n***",
          "startCode": "fn getPyramid(length) {\n\t\n}",
          "tests": [
            {
              "id": 1,
              "source": "getPyramid(1)",
              "expected": "\"*\n\"",
              "type": "EQUALS"
            },
            {
              "id": 2,
              "source": "getPyramid(2)",
              "expected": "\"*\n**\n\"",
              "type": "EQUALS"
            },
            {
              "id": 3,
              "source": "getPyramid(5)",
              "expected": "\"*\n**\n***\n****\n*****\n\"",
              "type": "EQUALS"
            },
            {
              "id": 4,
              "source": "getPyramid(8)",
              "expected": "\"*\n**\n***\n****\n*****\n******\n*******\n********\n\"",
              "type": "EQUALS"
            }
          ]
        }
      ]
    },
    {
      "id": 5,
      "name": "Arrays",
      "description": "Store lists of values",
      "levels": [
        {
          "id": 1,
          "name": "Creating arrays",
          "description": "Create a simple array called 'numbers' containing the real numbers 1.5, 2.3 and 3.15",
          "startCode": "",
          "help": {
            "text": "Arrays are used to store a list of values.",
            "code": "// arrays can be created like that\narr = new array { 1, 2, 3, 4, 5, 6, 7, 8, 10 }\n"
          },
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "numbers",
              "expected": "[1.5, 2.3, 3.15]"
            }
          ]
        },
        {
          "id": 2,
          "name": "Accessing arrays",
          "description": "Create a function that returns the first element of an array.",
          "startCode": "fn getFirst(arr) {\n    \n}",
          "help": {
            "text": "Arrays are accessed by a special syntax. The syntax uses the index of the element, but starts counting from 0",
            "code": "arr = new array { 1, 2, 3, 4, 5, 6, 7, 8, 10 }\nthird = arr[2];//third = 3\n//the index starts counting from 0, so the second element would have the index 1"
          },
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "arr = new array { 1, 2, 3, 4, 5, 6, 7, 8, 10 };\ngetFirst(arr)",
              "expected": "1"
            },
            {
              "id": 2,
              "type": "EQUALS",
              "source": "arr = new array { 2, 3, 4, 5, 6, 7, 8, 10 };\ngetFirst(arr);",
              "expected": "2"
            },
            {
              "id": 3,
              "type": "EQUALS",
              "source": "arr = new array { 10 };\ngetFirst(arr);",
              "expected": "10"
            }
          ]
        },
        {
          "id": 3,
          "name": "Loops and arrays - for in loops",
          "description": "Create a function that sums all values of the array. For example [2, 3, 5] => 2 + 3 + 5",
          "startCode": "fn sumAll(arr) {\n    \n}",
          "help": {
            "text": "For-in loops simplify the process of going through each value of the array.",
            "code": "arr = new array { 1, 2, 3, 4, 5, 6, 7, 8, 10 }\nfor element in arr {\n\tprintln(element);\n}\n//this code prints each element of the array 'arr'."
          },
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "arr = new array { 1, 2 };\nsumAll(arr)",
              "expected": "3"
            },
            {
              "id": 2,
              "type": "EQUALS",
              "source": "arr = new array { 2, 3, 4 };\nsumAll(arr);",
              "expected": "9"
            },
            {
              "id": 3,
              "type": "EQUALS",
              "source": "arr = new array { 10, 200, -5 };\nsumAll(arr);",
              "expected": "205"
            }
          ]
        },
        {
          "id": 4,
          "name": "Array functions",
          "description": "Add the value 10 to the array numbers.",
          "startCode": "numbers = new array {7, 8, 9}",
          "help": {
            "text": "Arrays have some special methods, that can even contain lambda expressions. One of these is .push.",
            "code": "arr = new array { 1, 2, 3, 4, 5, 6, 7, 8, 10 }\narr.push(11);\n//this adds 11 to the array."
          },
          "tests": [
            {
              "id": 1,
              "type": "ARRAY_INCLUDES",
              "source": "numbers",
              "expected": "10"
            }
          ]
        },
        {
          "id": 5,
          "name": "Stricter arrays",
          "description": "Create an array called 'newNumbers' of type real (for real numbers) and of the length 10",
          "startCode": "newNumbers = ",
          "help": {
            "code": "arr = new [2]int;\n//this creates an array with the length 2 of integers."
          },
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "newNumbers",
              "expected": "new [10]real"
            }
          ]
        },
        {
          "id": 6,
          "name": "Worst case",
          "description": "Create a function that get the minimum of all values of the given array. For example [2, 3, 5] => 2",
          "startCode": "fn min(arr) {\n    // Your code goes here\n}",
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "min(new array {1, 2, 3, 4})",
              "expected": "1"
            },
            {
              "id": 2,
              "type": "EQUALS",
              "source": "min(new array {100, 200, 50, 10, 60})",
              "expected": "10"
            },
            {
              "id": 3,
              "type": "EQUALS",
              "source": "min(new array {100, -200, 50, 10, 60})",
              "expected": "-200"
            },
            {
              "id": 4,
              "type": "EQUALS",
              "source": "min(new array {-100, -5, -60, -700, -1})",
              "expected": "-700"
            }
          ]
        },
        {
          "id": 7,
          "name": "The other way around",
          "description": "Create a function that returns the reverse of the given array. For example [2, 3, 5] => [5, 3, 2]",
          "startCode": "fn flip(arr) {\n    // Your code goes here\n}",
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "flip(new array { 2, 3, 5 })",
              "expected": "[5, 3, 2]"
            },
            {
              "id": 2,
              "type": "EQUALS",
              "source": "flip(new array { 2, 3, 5, 3, 1 })",
              "expected": "[1, 3, 5, 3, 2]"
            },
            {
              "id": 3,
              "type": "EQUALS",
              "source": "flip(new array { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 })",
              "expected": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
            }
          ]
        },
        {
          "id": 8,
          "name": "Symmetrical",
          "description": "Create a function that returns true only if the beginning of the array contains a palindrome of numbers. This means the array is the same as its reverse.",
          "startCode": "fn test(arr) {\n    // Your code goes here\n}",
          "tests": [
            {
              "id": 1,
              "type": "FALSE",
              "source": "test(new array { 2, 3, 5 })"
            },
            {
              "id": 2,
              "type": "TRUE",
              "source": "test(new array { 2, 3, 4, 4, 3, 2 })"
            },
            {
              "id": 3,
              "type": "TRUE",
              "source": "test(new array { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 })"
            },
            {
              "id": 4,
              "type": "FALSE",
              "source": "test(new array { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 8, 7, 6, 5, 4, 3, 2, 1 })"
            }
          ]
        }
      ]
    },
    {
      "id": 6,
      "name": "Classes",
      "description": "Structure your code",
      "levels": [
        {
          "id": 1,
          "name": "Creating new life",
          "description": "Instantiate a new object of the Test class into a variable named a.",
          "startCode": "class Test {\n    x = 42\n}\n// Your code goes here",
          "help": {
            "text": "",
            "code": "x = new Foo // Classes can be instantiated like this"
          },
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "typeof(Test)",
              "expected": "type"
            },
            {
              "id": 2,
              "type": "TRUE",
              "source": "typeof(a) == Test"
            },
            {
              "id": 3,
              "type": "EQUALS",
              "source": "a.x",
              "expected": "42"
            }
          ]
        },
        {
          "id": 2,
          "name": "Drawing the plans",
          "description": "Define any class named Test.",
          "startCode": "// Your code goes here",
          "help": {
            "text": "",
            "code": "class Foo {\n    // Classes can be defined like this\n}"
          },
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "typeof(Test)",
              "expected": "type"
            }
          ]
        },
        {
          "id": 3,
          "name": "Bundling thoughts",
          "description": "Define a class variable named z with the default value of 42.",
          "startCode": "class Test {\n    // Your code goes here\n}",
          "help": {
            "text": "",
            "code": "class Foo {\n    a = 12 // This is a class variable\n \n}"
          },
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "typeof(Test)",
              "expected": "type"
            },
            {
              "id": 2,
              "type": "EQUALS",
              "source": "(new Test).z",
              "expected": "42"
            }
          ]
        },
        {
          "id": 4,
          "name": "The state from within",
          "description": "Define a class function named z that returns the sum of x and y.",
          "startCode": "class Test {\n    x = 12;\n    y = 42;\n    // Your code goes here\n}",
          "help": {
            "text": "Class functions have direct access to all the variables inside an instance",
            "code": "class Foo {\n    a = 12;\n    fn foo() {\n        return a;\n    } // This is a class function\n \n}"
          },
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "typeof(Test)",
              "expected": "type"
            },
            {
              "id": 2,
              "type": "EQUALS",
              "source": "(new Test).z()",
              "expected": "54"
            },
            {
              "id": 2,
              "type": "EQUALS",
              "source": "(new Test { x = 1, y = 7 }).z()",
              "expected": "8"
            }
          ]
        },
        {
          "id": 5,
          "name": "Harness the power",
          "description": "Use the given class to build a list into a variable named a of the number 1..5 using the add function. Do not modify the class!",
          "startCode": "class List {\n    data = new array;\n    fn add(n) {\n        data.push(n)\n    } // Use this function \n}\n// Your code goes here",
          "help": {
            "text": "",
            "code": "y = new Foo;\ny.bar(42); // This will call the function inside the class"
          },
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "typeof(List)",
              "expected": "type"
            },
            {
              "id": 2,
              "type": "TRUE",
              "source": "typeof(a) == List"
            },
            {
              "id": 3,
              "type": "EQUALS",
              "source": "typeof(a.data)",
              "expected": "array"
            },
            {
              "id": 4,
              "type": "EQUALS",
              "source": "typeof(a.add)",
              "expected": "function"
            },
            {
              "id": 5,
              "type": "EQUALS",
              "source": "(new List).data",
              "expected": "[ ]"
            },
            {
              "id": 6,
              "type": "EQUALS",
              "source": "a.data",
              "expected": "[1, 2, 3, 4, 5]"
            }
          ]
        }
      ]
    },
    {
      "id": 7,
      "name": "Recursion",
      "description": "The same thing again",
      "levels": [
        {
          "id": 1,
          "name": "Loops but different",
          "description": "Create a recursive function named fak that returns the factorial of a given number.",
          "startCode": "fn fak(n) {\n    // Your code goes here\n}",
          "help": {
            "text": "A recursive function is a function that calls itself.\nTip: The factorial of a number n is the product of all natural number less or equal the n.",
            "code": "fn sum(n) {\n    if n == 0 {\n        return 0;\n    } else {\n        return n + sum(n - 1);\n    }\n}"
          },
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "fak(1)",
              "expected": "1"
            },
            {
              "id": 2,
              "type": "EQUALS",
              "source": "fak(2)",
              "expected": "2"
            },
            {
              "id": 3,
              "type": "EQUALS",
              "source": "fak(3)",
              "expected": "6"
            },
            {
              "id": 4,
              "type": "EQUALS",
              "source": "fak(4)",
              "expected": "24"
            },
            {
              "id": 5,
              "type": "EQUALS",
              "source": "fak(5)",
              "expected": "120"
            },
            {
              "id": 6,
              "type": "EQUALS",
              "source": "fak(10)",
              "expected": "3628800"
            },
            {
              "id": 7,
              "type": "EQUALS",
              "source": "fak(100)",
              "expected": "93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000"
            }
          ]
        },
        {
          "id": 2,
          "name": "Summing up history",
          "description": "Create a recursive function named fib that returns the fibonacci number with the given index.",
          "startCode": "fn fib(n) {\n    // Your code goes here\n}",
          "help": {
            "text": "Tip: The fibonacci sequence starts with 0, 1, 1, 2, 3, 5, ... Each element is the sum of the two previous numbers."
          },
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "fib(1)",
              "expected": "1"
            },
            {
              "id": 2,
              "type": "EQUALS",
              "source": "fib(2)",
              "expected": "1"
            },
            {
              "id": 3,
              "type": "EQUALS",
              "source": "fib(3)",
              "expected": "2"
            },
            {
              "id": 4,
              "type": "EQUALS",
              "source": "fib(4)",
              "expected": "3"
            },
            {
              "id": 5,
              "type": "EQUALS",
              "source": "fib(5)",
              "expected": "5"
            },
            {
              "id": 6,
              "type": "EQUALS",
              "source": "fib(10)",
              "expected": "55"
            },
            {
              "id": 7,
              "type": "EQUALS",
              "source": "fib(20)",
              "expected": "6765"
            }
          ]
        },
        {
          "id": 3,
          "name": "Going deeper",
          "description": "Create a function named sum that sums up all of the elements in a given array. Nested array elements should be added individually instead of adding the array object.",
          "startCode": "fn sum(arr) {\n    // Your code goes here\n}",
          "help": {
            "text": "Tip: You can test if the element is an array, in the following way.",
            "code": "if typeof(e) == array {\n    // e is an array\n} else {\n    // e is not an array\n}"
          },
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "sum(new array { 4, 1, 2, 5, 3 })",
              "expected": "15"
            },
            {
              "id": 2,
              "type": "EQUALS",
              "source": "sum(new array { new array { 4 }, 1, 2, new array { 5, 3 } })",
              "expected": "15"
            },
            {
              "id": 3,
              "type": "EQUALS",
              "source": "sum(new array { new array { new array { 4, new array { 1, new array { 2 } } }, new array { 5, 3 } } })",
              "expected": "15"
            }
          ]
        }
      ]
    },
    {
      "id": 8,
      "name": "Misc",
      "description": "Random stuff",
      "levels": [
        {
          "id": 1,
          "name": "Fizz or Buzz",
          "description": "Write a function named fizzBuzz that takes a number and returns the string \"Fizz\" if the given number is divisible by 3, \"Buzz\" if it is divisible by 5, \"FizzBuzz\" if it is divisible by both, and the string representing the number if none of these cases holds.",
          "startCode": "fn fizzBuzz(n) {\n    // Your code goes here\n}",
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "fizzBuzz(1)",
              "expected": "new string { 1 }"
            },
            {
              "id": 2,
              "type": "EQUALS",
              "source": "fizzBuzz(2)",
              "expected": "new string { 2 }"
            },
            {
              "id": 3,
              "type": "EQUALS",
              "source": "fizzBuzz(3)",
              "expected": "\"Fizz\""
            },
            {
              "id": 4,
              "type": "EQUALS",
              "source": "fizzBuzz(5)",
              "expected": "\"Buzz\""
            },
            {
              "id": 5,
              "type": "EQUALS",
              "source": "fizzBuzz(15)",
              "expected": "\"FizzBuzz\""
            },
            {
              "id": 6,
              "type": "EQUALS",
              "source": "fizzBuzz(99)",
              "expected": "\"Fizz\""
            },
            {
              "id": 7,
              "type": "EQUALS",
              "source": "fizzBuzz(100)",
              "expected": "\"Buzz\""
            },
            {
              "id": 8,
              "type": "EQUALS",
              "source": "fizzBuzz(105)",
              "expected": "\"FizzBuzz\""
            },
            {
              "id": 9,
              "type": "EQUALS",
              "source": "fizzBuzz(112)",
              "expected": "new string { 112 }"
            }
          ]
        },
        {
          "id": 2,
          "name": "Take the loot",
          "description": "Write a function named take that given an array of numbers and a maximum limit returns a subset of the array that when summed together get closest to the limit without going over.",
          "startCode": "fn take(arr, limit) {\n    // Your code goes here\n}",
          "tests": [
            {
              "id": 1,
              "type": "EQUALS",
              "source": "take(new array { 50, 100, 1000, 1500, 1610 }, 1650).length",
              "expected": "3"
            },
            {
              "id": 2,
              "type": "ARRAY_INCLUDES",
              "source": "take(new array { 50, 100, 1000, 1500, 1610 }, 1650)",
              "expected": "50"
            },
            {
              "id": 3,
              "type": "ARRAY_INCLUDES",
              "source": "take(new array { 50, 100, 1000, 1500, 1610 }, 1650)",
              "expected": "100"
            },
            {
              "id": 4,
              "type": "ARRAY_INCLUDES",
              "source": "take(new array { 50, 100, 1000, 1500, 1610 }, 1650)",
              "expected": "1500"
            }
          ]
        }
      ]
    }
  ]
}
